apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'kotlin'
apply from: '../deploy.gradle'

group = 'com.kotcrab.vis'
archivesBaseName = "vis-editor"
sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

eclipse.project {
    name = appName + "-editor"
}

dependencies {
    compile project(":runtime")
    compile "com.kotcrab.vis:vis-ui:1.4.0"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "com.badlogicgames.gdx:gdx:$editorGdxVersion"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$editorGdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$editorGdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-freetype:$editorGdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$editorGdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-box2d:$editorGdxVersion"
    compile "com.badlogicgames.gdx:gdx-box2d-platform:$editorGdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-tools:$editorGdxVersion"
    compile "com.badlogicgames.box2dlights:box2dlights:$box2dLightsVersion"
    compile "net.onedaybeard.artemis:artemis-odb:$artemisVersion"
    compile "com.esotericsoftware:kryo:$kryoVersion"
    compile "commons-io:commons-io:$commonsIoVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "org.apache.commons:commons-exec:$commonsExecVersion"
    compile "net.java.dev.jna:jna:$jnaVersion"
    compile "net.java.dev.jna:platform:$jnaPlatformVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "org.jsoup:jsoup:$jsoupVersion"
    compile "org.slf4j:slf4j-simple:$slf4jVersion"
    compile "org.imgscalr:imgscalr-lib:$imgscalrVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "uk.com.robust-it:cloning:$cloningVersion"
    provided "com.apple:AppleJavaExtensions:$appleJavaExtensionsVersion", optional

    testCompile project(":plugins:vis-runtime-spine")
    testCompile project(":plugins:vis-runtime-spriter")
}


jar {
    manifest {
        attributes(
                "Build-Timestamp": buildTimestamp,
                "Class-Path": configurations.runtime.files.collect { "lib/" + it.name }.join(' '),
                "Build-Jdk": JavaVersion.current(),
                "Main-Class": mainClassName,
        )
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                name 'vis-editor'
                artifactId 'vis-editor'
                packaging 'jar'
                description 'Scene Editor for LibGDX'
            }
        }
    }
}

task copyExtJars(dependsOn: [':plugins:vis-editor-spine:jar', ':plugins:vis-editor-spine-notifier:jar', ':plugins:vis-editor-spriter:jar']) {
    def spine = project(':plugins:vis-editor-spine')
    def spineRuntime = project(':plugins:vis-runtime-spine')
    def spineNotifier = project(':plugins:vis-editor-spine-notifier')

    def spriter = project(':plugins:vis-editor-spriter')
    def spriterRuntime = project(':plugins:vis-runtime-spriter')

    doLast {
        copy {
            from spine.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spine'
        }

        copy {
            from spineRuntime.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spine/lib'
        }

        copy {
            from spineNotifier.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spine-notifier'
        }

        copy {
            from spriter.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spriter'
        }

        copy {
            from spriterRuntime.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spriter/lib'
        }
    }
}

task copyTools(dependsOn: [':tools:crash-reporter:jar']) {
    def reporter = project(':tools:crash-reporter')

    doLast {
        copy {
            from reporter.jar
            rename("(.*).jar", "crash-reporter.jar")
            into sourceSets.main.output.classesDir.path + '/tools/'
        }
    }
}

//task run(dependsOn: [copyExtJars, copyTools], type: JavaExec) {
task run(dependsOn: [copyExtJars], type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    ignoreExitValue = true
    jvmArgs "-Dfile.encoding=UTF-8"
    if (System.properties['os.name'].toLowerCase().contains('mac')) {
        jvmArgs "-XstartOnFirstThread"
    }
    if (project.hasProperty("runArgs")) {
        args = Eval.me(runArgs)
    }
}


task packEditorTextures {
    doLast {
        description 'Packages editor textures'

        def basePath = rootProject.projectDir.absolutePath + "/editor/"

        def iconsInput = new File(basePath + "assets-raw/icons").absolutePath
        def iconsOutput = new File(basePath + "src/main/resources/gfx").absolutePath
        com.badlogic.gdx.tools.texturepacker.TexturePacker.process(iconsInput, iconsOutput, "icons")
        def miscInput = new File(basePath + "assets-raw/misc").absolutePath
        def miscOutput = new File(basePath + "src/main/resources/gfx").absolutePath
        com.badlogic.gdx.tools.texturepacker.TexturePacker.process(miscInput, miscOutput, "misc")
    }
}
